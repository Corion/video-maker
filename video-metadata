#!/usr/bin/perl
use strict;
use warnings;

use Getopt::Long;
use YAML 'DumpFile';
use File::Basename;

GetOptions(
    'o=s' => \my $outname,
    'v'   => \my $verbose,
    'artist=s' => \my $artist,
    'show=s' => \my $show,
    'language=s' => \my $language,
    'url=s' => \my $talk_url,
    'schedule=s' => \my $schedule_file,
);

my ($movie) = @ARGV;

sub read_schedule_xml {
    my ($schedule) = @_;
    my $twig = XML::Twig->new();
    my $s = $twig->parsefile( $schedule )->simplify( forcearray => [qw[day room]] ); # sluuurp
    my $start = time + 15;
    # Maybe we should always renormalize the schedule to the current time?
    # Or have an offset-fudge so we can start late?
    my @talks = map { my $r = $_; map { +{ id => $_, %{$r->{event}->{$_}} } } keys %{ $r->{event}} }
                map { values %{ $_->{room}} }
                @{ $s->{day} };

    #if( scalar keys %only_ids ) {
    #    @talks = grep { exists $only_ids{ $_->{id}} } @talks;
    #};

    for my $t (@talks) {
        $t->{date} =~ s!\+(\d\d):!+$1!;
        if( $t->{date} =~ m!^(20\d\d-\d\d-\d\d) (\d\d:\d\d:\d\d)$! ) {
            $t->{date} = "${1}T$2+0100";
        };
        if( !$t->{date}) {
            use Data::Dumper;
            die Dumper $t;
        };
        $t->{date} = Time::Piece->strptime( $t->{date},'%Y-%m-%dT%H:%M:%S%z' )->epoch;
        $t->{speaker} = join ", ", sort { $a cmp $b } map { $_->{content} } values %{ $t->{persons}->{person}};
        if( $t->{duration} !~ /^(?:\d\d:)?\d\d:\d\d$/) {
            use Data::Dumper;
            die "No duration in " . Dumper $t;
        } elsif ( $t->{duration} =~ /^\d\d:\d\d$/ ) {
            $t->{duration} = "$t->{duration}:00";
        };
        #$t->{slot_duration} = time_to_seconds( $t->{duration} );
    };
    return @talks;
}

(my $title = $movie) =~ s!\.joined\.(MP4|mkv)$!!i;
$title =~ s!^(20\d\d)-\d\d-\d\d(_[012]\d-\d\d-\d\d)?[-_]!!;
$title =~ s![-_]! !g;

if( $schedule_file ) {
    require XML::Twig;
    require Time::Piece;

    my $name = basename $movie;

    if( $name =~ /^(20\d\d-\d\d-\d\d)[- T](\d\d-\d\d-\d\d)\b/ ) {
        my $ts = "$1T$2+0100";
        #warn "Found timestamp $ts";
        my $start_time = Time::Piece->strptime($ts,'%Y-%m-%dT%H-%M-%S%z');

        (my $talk) = grep { $_->{date} == $start_time->epoch } read_schedule_xml( $schedule_file );

        if( $talk ) {
            $talk_url = "https://act.yapc.eu/gpw2021/talk/$talk->{id}";
            $title    = $talk->{title};
            $artist   = $talk->{speaker};
        };
    };
}

my $config = {
    start => '00:00:00.0000',
    stop  => '00:00:00.0000',
    metadata => {
        title => $title,
        artist => $artist,
        show   => $show,
        language => $language,
        url => $talk_url,
    },
};
DumpFile( $outname, $config );
